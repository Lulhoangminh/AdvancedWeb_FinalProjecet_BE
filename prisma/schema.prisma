// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt() @db.Date

  email            String    @unique
  fullname         String?
  dob              DateTime? @db.Date
  hash             String?
  hashedRt         String?
  Type             String?
  confirmationCode String?   @unique
  isEmailConfirmed Boolean   @default(false)
  IsBanned         Boolean   @default(false)
  IsLocked         Boolean   @default(false)

  teacher Teacher?  @relation("User_Teacher")
  student Student?  @relation("User_Student")
  Admin   Admin?    @relation("User_Admin")
  Comment Comment[] @relation("Comment_User")
}

model Teacher {
  user_id    Int      @unique
  teacher_id Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  user                  User                    @relation("User_Teacher", fields: [user_id], references: [id])
  ClassInviteForTeacher ClassInviteForTeacher[] @relation("ClassInviteForTeacher_Teacher")
  ClassTeacher          ClassTeacher[]          @relation("ClassTeacher_Teacher")
  GradeReview           GradeReview[]           @relation("GradeReview_Teacher")
}

model Student {
  user_id    Int      @unique
  student_id Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  user                  User                    @relation("User_Student", fields: [user_id], references: [id])
  ClassMember           ClassMember[]           @relation("ClassTeacher_Student")
  ClassInviteForStudent ClassInviteForStudent[] @relation("ClassInviteForStudent_Student")
  GradeReview           GradeReview[]           @relation("GradeReview_Student")
  StudentGrade          StudentGrade[]          @relation("StudentGrade_Student")
}

model Admin {
  user_id    Int      @unique
  admin_id   Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  User User @relation("User_Admin", fields: [user_id], references: [id])
}

model Class {
  class_id   Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  invite_code String @unique
  invite_link String @unique

  class_name  String?
  status      String  @default("active")
  description String?

  ClassTeacher          ClassTeacher[]          @relation("ClassTeacher_Class")
  ClassMember           ClassMember[]           @relation("ClassTeacher_Class")
  GradeComposition      GradeComposition[]      @relation("GradeComposition_Class")
  ClassInviteForTeacher ClassInviteForTeacher[] @relation("ClassInviteForTeacher_Class")
  ClassInviteForStudent ClassInviteForStudent[] @relation("ClassInviteForStudent_Class")
}

model ClassTeacher {
  teacher_id Int
  class_id   Int

  teacher Teacher? @relation("ClassTeacher_Teacher", fields: [teacher_id], references: [teacher_id])
  class   Class?   @relation("ClassTeacher_Class", fields: [class_id], references: [class_id])

  @@unique([teacher_id, class_id])
}

model ClassMember {
  student_id Int
  class_id   Int

  student Student? @relation("ClassTeacher_Student", fields: [student_id], references: [student_id])
  class   Class?   @relation("ClassTeacher_Class", fields: [class_id], references: [class_id])

  @@unique([student_id, class_id])
}

model ClassInviteForTeacher {
  teacher_id   Int
  class_id     Int
  invited_time DateTime @default(now())

  teacher Teacher? @relation("ClassInviteForTeacher_Teacher", fields: [teacher_id], references: [teacher_id])
  class   Class?   @relation("ClassInviteForTeacher_Class", fields: [class_id], references: [class_id])

  @@unique([class_id, teacher_id])
}

model ClassInviteForStudent {
  student_id   Int
  class_id     Int
  invited_time DateTime @default(now())

  student Student? @relation("ClassInviteForStudent_Student", fields: [student_id], references: [student_id])
  class   Class?   @relation("ClassInviteForStudent_Class", fields: [class_id], references: [class_id])

  @@unique([student_id, class_id])
}

model GradeComposition {
  grade_composition_id Int      @id @default(autoincrement())
  class_id             Int?
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt()

  name        String
  Percentage  Int
  Rank        Int
  IsFinalized Boolean

  class        Class?         @relation("GradeComposition_Class", fields: [class_id], references: [class_id])
  StudentGrade StudentGrade[] @relation("StudentGrade_GradeComposition")

  // @@index([class_id])
}

model StudentGrade {
  student_grade_id     Int      @id @default(autoincrement())
  student_id           Int
  grade_composition_id Int
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt()
  grade                Float

  student          Student?          @relation("StudentGrade_Student", fields: [student_id], references: [student_id])
  gradeComposition GradeComposition? @relation("StudentGrade_GradeComposition", fields: [grade_composition_id], references: [grade_composition_id])
  GradeReview      GradeReview?      @relation("GradeReview_StudentGrade")

  // @@index([student_id])
  // @@index([grade_composition_id])
}

model GradeReview {
  grade_review_id  Int      @id @default(autoincrement())
  student_grade_id Int      @unique
  student_id       Int
  teacher_id       Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt()

  current_Grade  Int
  expected_Grade Int
  final_grade    Int
  explanation    String

  student      Student?      @relation("GradeReview_Student", fields: [student_id], references: [student_id])
  teacher      Teacher?      @relation("GradeReview_Teacher", fields: [teacher_id], references: [teacher_id])
  studentGrade StudentGrade? @relation("GradeReview_StudentGrade", fields: [student_grade_id], references: [student_grade_id])
  Comment      Comment[]     @relation("Comment_GradeReview")

  // @@index([student_id])
  // @@index([teacher_id])
  // @@index([student_grade_id])
}

model Comment {
  comment_id      Int      @id @default(autoincrement())
  grade_review_id Int
  user_id         Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt()
  comment         String

  user        User        @relation("Comment_User", fields: [user_id], references: [id])
  gradeReview GradeReview @relation("Comment_GradeReview", fields: [grade_review_id], references: [grade_review_id])

  // @@index([user_id])
  // @@index([grade_review_id])
}
